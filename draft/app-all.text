from flask import (Flask, url_for, flash, render_template, request, redirect, session, jsonify)
import events, messages, login

app = Flask(__name__)
app.secret_key = "notverysecret"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/createAccount/', methods=['GET', 'POST'])
def logins():
    if request.method == 'GET':
        return render_template('userinfo.html')
    if request.method == 'POST':
        error = False
        email = ''
        uname = ''
        pwd1 = ''
        pwd2 = ''
        name = ''
        nname = ''
        year = ''
        phnum = ''
        sprefs = ''
        industry = ''
        fname = ''
        ances = ''
        team = ''
        ttype = ''
        ncity= ''
        state = ''
        country = ''
        
        try:
            email = request.form.get("email")
            uname = request.form.get("username")
            pwd1 = request.form.get("password1")
            pwd2 = request.form.get("password2")
            name = request.form.get("name")
            nname = request.form.get("nickname")
            year = request.form.get("year")
            phnum = request.form.get("phnum")
            sprefs = request.form.get("sprefs")
            industry = request.form.get("ind")
            fname = request.form.get("fname")
            ances = request.form.get("ancestor")
            team = request.form.get("team")
            ttype = request.form.get("t")
            ncity = request.form.get("tcity")
            state = request.form.get("tstate")
            country = request.form.get("tcountry")
        except:
            flash("Access to missing form inputs")
            error = True
        
        if uname == '':
            error = True
            flash("Missing input: Username is missing")
        if pwd1 == '' or pwd2 == '':
            error = True
            flash("Missing input: One or both of the password fields are incomplete")
        if pwd1 != pwd2:
            error = True
            flash("Passwords do not match")    
        if email == '' or "@" not in email:
            error = True
            flash("Invalid email address")
        if name == '':
            error = True
            flash("Missing input: Name is missing")
        if not year.isdigit():
            error = True
            flash("Invalid class year")
        if sprefs == '':
            error = True
            flash("Missing input: Security preferences missing")
        
        if not error:
            conn = login.getConn("c9")
            if login.findUser(conn, uname) is None:
                flash("{} created an account".format(uname))
                login.insertUser(conn, name, email, uname, pwd1, nname, phnum, year, sprefs)
                
                if industry != '':
                    login.insertIndustry(conn, uname, industry)
                if fname != '':
                    login.insertFamily(conn, uname, fname, ances)
                if team != '':
                    login.insertTeam(conn, uname, team, ttype, ncity, state, country)
                return redirect(url_for('index'))
            else:
                flash("Username already exists") # username not in database
                return redirect(request.referrer)
        else:
            return redirect(request.referrer)
                
# Sets the user of the session
@app.route('/setUID/', methods=['POST'])
def setUID():
    uid = request.form.get('uid')
    session['uid'] = uid
    
    conn = login.getConn("c9")
    session['utype'] = login.getUserType(conn, uid)
    return redirect(request.referrer)
    
@app.route('/approved/')
def viewApproved():
    if session['uid'] == '':
        flash("Need to log in")
        return redirect(request.referrer)
    else:
        conn = events.getConn('c9')
        all_events = events.getEvents(conn, 1)
        return render_template('events.html', events=all_events)

@app.route('/submitted/')
def viewSubmitted():
    if session['uid'] == '':
        flash("Need to log in")
        return redirect(request.referrer)
    else:
        if session['utype']['user_type'] == 'regular':
            flash('Not accessible for regular users')
            return redirect(url_for('viewApproved'))
        else:
            conn = events.getConn('c9')
            all_events = events.getEvents(conn, 0)
            return render_template('events.html', events=all_events, approve = "yes")

@app.route('/submitEvent/', methods=['POST'])
def submitEvent():
    if session['uid'] == '':
        flash("Need to log in")
        return redirect(request.referrer)
    else:
        error = False
        name = ''
        city = ''
        state = ''
        country = ''
        description = ''
        date = ''
        
        try:
            name = request.form.get('name')
            city = request.form.get('city')
            state = request.form.get('state')
            country = request.form.get('country')
            desc = request.form.get('desc')
            date = request.form.get('date')
        except:
            flash("Access to missing form inputs")
            error = True
        
        if name == '':
            flash("Missing input: Event's name is missing")
            error = True
        
        checkdate = "".join(request.form.get('date').split("-"))
        if not checkdate or not checkdate.isdigit():
            error = True
            if not checkdate:
                flash("Missing input: Event's date is missing")
            else:
                flash("Date is not numeric")
        
        if not error:
            conn = events.getConn('c9')
            if events.checkEvent(conn, name, date):
                flash("Event {} at {} exists".format(name, date))
            else:
                events.submitEvent(conn, name, city, state, country, desc, date)
                flash("Event {} submitted for approval by admins".format(name))
            
        return redirect(url_for('viewApproved'))

@app.route('/approveDeleteEvent/', methods=['POST'])
def approveDeleteEvent():
    conn = events.getConn('c9')
    name = request.form.get('name')
    date = request.form.get('date')
    
    if request.form.get('submit') == 'Approve!':
        events.approveEvent(conn, name, date)
        flash("Event {} approved".format(name))
        return redirect(url_for('viewApproved'))
        
    if request.form.get('submit') == 'Delete!':
        print(name, date)
        events.deleteEvent(conn, name, date)
        flash("Event {} deleted".format(name))
        return redirect(url_for('viewSubmitted'))

# Main page for messaging feature    
@app.route('/messages/')
def messaging():
    if session['uid'] == '': # Not logged in yet
        flash("Need to log in")
        return render_template('index.html') # Go to a temporary login 
    else:
        uid = session['uid']
        curs = messages.cursor('c9')
        allMsgs = messages.getMessageHistory(curs, uid) # Get people user has messaged/received messages from
        allK = list(allMsgs.keys())
        mPreview=[] # Empty list to store a preview of messages with each person
        num=[] # For navigating for all the inputs in html page
        for i in range(0,len(allK)):
            mPreview.append(messages.getLastM(curs,uid, allK[i]))
        for i in range(0,len(allMsgs)):
            num.append(i)
        return render_template('messages.html', num=num, msgs=allMsgs, mKeys=allK, mPrev=mPreview)

# Sends new message        
@app.route('/sendMsg/', methods=['POST'])
def sendMsg():
    curs = messages.cursor('c9')
    uid = session['uid']
    receiver = request.form.get('receiver')
    content = request.form.get('message')
    messages.sendMessage(curs, uid, receiver, content)
    return redirect(request.referrer)

# Sends new message with Ajax
@app.route('/sendMsgAjax/', methods=['POST'])
def sendMsgAjax():
    curs = messages.cursor('c9')
    uid = session['uid']
    receiver = request.form.get('receiver')
    content = request.form.get('message')
    messages.sendMessage(curs, uid, receiver, content)
    return jsonify(uid) #Could even return text

# For showing messages with an individual person
@app.route('/person/')   
def messagePerson():
    uid = session['uid']
    person = request.args.get('person')
    curs=messages.cursor('c9')
    msgs = messages.getMessages(curs, uid, person)
    return jsonify(msgs)

if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0',8080)# Lauren Tso

import sys
import MySQLdb

# ================================================================

# return the connection to MySQLdb for particular user
def getConn(db):
    conn =  MySQLdb.connect(host='localhost',
                           user='ltso',
                           passwd='',
                           db=db)
    conn.autocommit(True)
    return conn
                           
def getEvents(conn, approved):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from events where approved = %s order by edate asc''', (approved,))
    return curs.fetchall()
    
def checkEvent(conn, name, date):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select count(*) as count from events where ename = %s and edate = %s''', (name, date,))
    row = curs.fetchone()
    return row['count'] > 0
    
def submitEvent(conn, name, city, state, country, desc, date):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into events(ename, city, state, country, description, edate, approved) 
                    values(%s, %s, %s, %s, %s, %s, 0)''', (name, city, state, country, desc, date,))
                    
def approveEvent(conn, name, date):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''update events set approved = 1 where ename = %s and edate = %s''', (name, date,))

def deleteEvent(conn, name, date):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''delete from events where ename = %s and edate = %s''', (name, date,))

# ================================================================

if __name__ == '__main__':
    conn = getConn('wmdb')

import sys
import MySQLdb

def getConn(db):
    conn =  MySQLdb.connect(host='localhost',
                           user='ltso',
                           passwd='',
                           db=db)
    conn.autocommit(True)
    return conn

def findUser(conn, username):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from user where username = %s''', [username,])
    return curs.fetchone()

def getUserType(conn, username):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select user_type from user where username = %s''', [username,])
    return curs.fetchone()

def insertUser(conn, name, email, username, password, nickname, phnum, classyear, sprefs):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    return curs.execute('''insert into user(name, email, username, password,
             nickname, phnum, classyear, user_type, sprefs) values 
             (%s, %s, %s, %s, %s, %s, %s, "regular", %s)''', [name, email, username, password, nickname, phnum,
             classyear, sprefs,])

def insertIndustry(conn, username, industry):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    return curs.execute('''insert into industry(pid, iname) values (%s, %s)''', [username, industry,])

def insertFamily(conn, username, family, pred):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    return curs.execute('''insert into family(memeber, name, predecessor) values (%s, %s, %s)''', [username, family, pred,])

def insertTeam(conn, username, team, ttype, ncity, state, country):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    return curs.execute('''insert into team(pid, tname, `type`, nearestcity, state, country) 
                           values (%s, %s, %s, %s, %s, %s)''', [username, team, ttype, ncity, state, country,])
# Riann Tang

import sys
import MySQLdb

def getConn(db):
    conn = MySQLdb.connect(host='localhost',
                           user='ltso',
                           passwd='',
                           db=db)
    conn.autocommit(True) # Necessary to alter the wmdb database
    return conn

def cursor(db, rowType='dictionary'): 
    conn = getConn(db)
    '''Returns a list of rows, 
    either as dictionaries (the default) or tuples'''
    if rowType == 'tuple':
        curs = conn.cursor()
    elif rowType == 'dictionary':
        # results as Dictionaries
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
    return curs

# Helper function to get messages sent by given user
def getSenderHist(curs, user):
    curs.execute('''select receiver from messages where sender=%s''', (user,))
    return curs.fetchall()

# Helper function to get messages received by given user  
def getReceiveHist(curs,user):
    curs.execute('''select sender from messages where receiver=%s''', (user,))
    return curs.fetchall()

# Helper function get the name of a user given their username
def getName(curs, user):
    curs.execute('''select name from user where username=%s''', (user,))
    return curs.fetchone()

# Function to get all messages sent and received by given user    
def getMessageHistory(curs, user):
    sendHist = getSenderHist(curs, user)
    receiveHist=getReceiveHist(curs, user)
    allMs = sendHist+receiveHist
    distinctMs = []
    for i in range (0, len(allMs)):
        if allMs[i].has_key('receiver'):
            if allMs[i]['receiver'] not in distinctMs:
                distinctMs.append(allMs[i]['receiver'])
        if allMs[i].has_key('sender'):
            if allMs[i]['sender'] not in distinctMs:
                distinctMs.append(allMs[i]['sender'])
    mHist = {}
    for i in range (0,len(distinctMs)):
        name = getName(curs, distinctMs[i])
        mHist[distinctMs[i]] = name['name']
    return mHist

# Function to get the most recently message between two users
def getLastM(curs, user1, user2):
    curs.execute('''select message from messages where (sender=%s and receiver=%s) or 
    (sender=%s and receiver=%s) order by mid desc limit 1''',(user1,user2,user2,user1,))
    return curs.fetchone()

# Function to get all messages between two users   
def getMessages(curs, user1, user2):
    curs.execute('''select message, sender from messages where (sender=%s and receiver=%s) 
    or (sender=%s and receiver=%s)''',(user1, user2, user2, user1,))
    return curs.fetchall()

# Function to input a new message into the messages table
def sendMessage(curs, sender, receiver, msg):
    curs.execute('''insert into messages (sender, receiver, message) values 
    (%s,%s,%s)''', (sender, receiver, msg,))
    <!--Lauren Tso-->
<!doctype html>

{% extends "index.html" %}
{% block content %}

<title>Events</title>
<body>

<form action="/submitEvent/" method="POST">
    <fieldset>
        <legend>Event Data</legend>
        <table>
            <tr><td><label for="name" accesskey="n"> Event Name:</label></td><td><input type="text" name="name" id="name"></td></tr>
            <tr><td><label for="city" accesskey="c"> Event City:</label></td><td><input type="text" name="city" id="city"></td></tr>
            <tr><td><label for="state" accesskey="s"> Event State:</label></td><td><input type="text" name="state" id="state"></td></tr>
            <tr><td><label for="country" accesskey="o"> Event Country:</label></td><td><input type="text" name="country" id="country"></td></tr>
            <tr><td><label for="desc" accesskey="d"> Event Description:</label></td><td><input type="text" name="desc" id="desc"></td></tr>
            <tr><td><label for="date" accesskey="a"> Event Date:</label></td><td><input type="text" name="date" id="date"></td></tr>
        </table>
    </fieldset>
    <p>
        <input type='submit' value='Submit Event'>
    </p>
</form>
 
 
<table id="events-list">
        <tr>
            <th>Name</th>
            <th>City</th>
            <th>State</th>
            <th>Country</th>
            <th>Description</th>
            <th>Date</th>
        </tr>
        </tr>
        {% for event in events %}
        <tr class = "event" >
            <td class="name">{{event.ename}}</td>
            <td class="city">{{event.city}}</td>
            <td class="state">{{event.state}}</td>
            <td class="country">{{event.country}}</td>
            <td class="description">{{event.description}}</td>
            <td class="date">{{event.edate}}</td>
            {% if approve %}
            <td><form method="post" action="/approveDeleteEvent/">
                <input type="hidden" name="name" value="{{event.ename}}">
                <input type="hidden" name="date" value="{{event.edate}}">
                <input type="submit" name="submit" value="Approve!">
                <input type="submit" name="submit" value="Delete!">
            </form></td>
            {% endif %}
        </tr>
        {% endfor %}
        
    </table>
 
</body>
</html>

{% endblock %}
<!doctype html>

<html lang='en'>

<title>Lounge</title>
<body>
    
<!--display all flashed messages-->
{% with messages = get_flashed_messages() %}
    {% if messages %}
        <div id="messages">
        {% for message in messages %}
            <p>{{ message }}</p>
        {% endfor %}
        </div>
    {% endif %}
{% endwith %}

{% block content %}

<h1>Welcome!</h1>

<html>
    <body>
        <p>Log in!
          <form action="/setUID/" method="POST">
            <input type="text" name="uid" placeholder="username">
          </form>
        </p>
        
        <p>Check out our pages!
            <a href="/">Home</a>
            <a href="/createAccount/">Create a profile</a>
            <a href="/approved/">Events</a>
            <a href="/messages/">Messages</a>
        </p>
    </body>
    
Lounge is a Whiptail database where current members and alumnae of the Wellesley 
ultimate frisbee team can more easily connect for fundraising, networking, and 
socializing.

{% endblock %}
</html>
<!--Riann Tang-->
<!doctype html>

{% extends "index.html" %}
{% block content %}

<html>
  <head>
    <meta charset="utf-8">
    <meta name=author content="Riann Tang">
    <meta name=description content="">
    <meta name=keywords content="">    
    <title>Messages!</title>

  </head>
  <body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <h1 class="title">Messaging!</h1>
    
    <!--Section for displaying names of people with whom user has a message history-->
    <div id="allM"> 
        <table id="messagesT" style="width:10%">
          <tr>
            <th>Name</th>
          </tr>
          {% for n in num %}
            <tr class = 'tt' data-tt= {{mKeys[n]}}>
                <td><button class="chooseMsgButton" type="button">{{ msgs[mKeys[n]] }}: {{mPrev[n]['message']}}</button></td>
            </tr>
          {% endfor %}
        </table>
    </div>
    
    <!--Section for showing messages one person and sending them messages-->
    <div id="newM">
        <subdiv id="oneM">
          <p>Choose a message to start</p>
        </subdiv>
        <form id=newMForm action="/sendMsg/" method="POST">
            <input type="text" name="message" placeholder="Type a message">
            <span id="tt"></span> 
        </form>
    </div>

    <script>
      $("#messagesT").on("click", ".chooseMsgButton", function(event) {
        var $dt = $(this).closest("[data-tt]");
        var person = $dt.data('tt');
        
        // Hidden input with name of the receiver
        $("#newM  #tt").html('<input type="hidden" id="receiver" name="receiver" value=' + person + '>')
        
        // Get messages history with selected person
        $("#oneM").empty();
        var url = "{{url_for('messagePerson')}}";
        $.get(url, {person:person}, function(data){
          for (i=0;i<data.length;i++){
            $("#oneM").append("<p>" + data[i]['sender'] + ": " + data[i]['message'] + "</p>");
          }
        });
      })

      // Use Ajax to send message and show new message in message history
      $("#newMForm").on("submit", function(event) {
        event.preventDefault(); // Keep form from submitting normally
        var url = "{{url_for('sendMsgAjax')}}";
        var receiver = document.getElementById("newMForm").elements.namedItem("receiver").value;
        var message = document.getElementById("newMForm").elements.namedItem("message").value;
        $.post(url, {receiver: receiver, message:message}, function(data){
          $("#oneM").append("<p>" + data + ": " + message + "</p>");
        }); 
        $("#newMForm")[0].reset(); //Clear the text field after message sends
      })
    </script>
  
  </body>
</html>

{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Tamara Deshong">
    <title>User Information</title>
    
</head>
{% extends "index.html" %}

{% block content %}

<body>
<h1>Create an Account</h1>

<form action="/createAccount/" method="POST">
    <fieldset>
        <legend>Account Information</legend>
        <table>
            <tr><td><label for="username"> Username:</label></td><td><input type="text" name="username" id="username"></td></tr>
            <tr><td><label for="password1"> Password:</label></td><td><input type="text" name="password1" id="password1"></td></tr>
            <tr><td><label for="password2"> Re-enter password:</label></td><td><input type="text" name="password2" id="password2"><br></td></tr>
            <tr><td><label for="email"> Email:</label></td><td><input type="text" name="email" id="email"></td></tr>
            <tr><td><label for="security"> Security preferences:<br>
                <input type="radio" name="sprefs" value="all"> Everyone<br>
                <input type="radio" name="sprefs" value="class"> Whiptails in my class<br>
                <input type="radio" name="sprefs" value="overlap"> Whiptails I went to school with<br>
                <input type="radio" name="sprefs" value="admin"> Just me<br>
            </td></tr>
        </table>
    </fieldset>
    <br>
    <fieldset>
        <legend>Personal Information</legend>
        <table>
            <tr><td><label for="name"> Name:</label></td><td><input type="text" name="name" id="name"></td></tr>
            <tr><td><label for="nickname"> Nickname:</label></td><td><input type="text" name="nickname" id="nickname"></td></tr>
            <tr><td><label for="phnum"> Phone number:</label></td><td><input type="text" name="phnum" id="phnum"></td></tr>
            <tr><td><label for="year"> Class year:</label></td><td><input type="text" name="year" id="year"></td></tr>
        </table>
    </fieldset>
    <br>
    <fieldset>
        <legend>Industry Information</legend>
        <table>
            <tr><td><label for="industry"> Industry:<br>
                <input type="radio" name="ind" value="GandL"> Government and Law<br>
                <input type="radio" name="ind" value="TandE"> Technology and Engineering<br>
                <input type="radio" name="ind" value="CandF"> Consulting and Finance<br>
                <input type="radio" name="ind" value="PandLS"> Physical and Life Sciences<br>
                <input type="radio" name="ind" value="EandN"> Education and Nonprofit<br>
                <input type="radio" name="ind" value="HP"> Health Professions<br>
            </td></tr>
        </table>
    </fieldset>
    <br>
    <fieldset>
        <legend>Family Information</legend>
        <table>    
            <tr><td><label for="fname"> Family name:</label></td><td><input type="text" name="fname" id="fname"></td></tr>
            <tr><td><label for="ancestor"> Ancestor:</label></td><td><input type="text" name="ancestor" id="ancestor"></td></tr>
        </table>
    </fieldset>
    <br>
    <fieldset>
        <legend>Team Information</legend>
        <table>    
            <tr><td><label for="team"> Team:</label></td><td><input type="text" name="team" id="team"></td></tr>
            <tr><td><label for="ttype"> Team type:<br>
                <input type="radio" name="t" value="club"> Club<br>
                <input type="radio" name="t" value="league"> League<br>
                <input type="radio" name="t" value="college"> College<br>
            </td></tr>
            <tr><td><label for="tcity"> Nearest city:</label></td><td><input type="text" name="tcity" id="tcity"></td></tr>
            <tr><td><label for="tstate"> State:</label></td><td><input type="text" name="tstate" id="tstate"></td></tr>
            <tr><td><label for="tcountry"> Country:</label></td><td><input type="text" name="tcountry" id="tcountry"></td></tr>
        </table>
    </fieldset>
    <p>
        <input type='submit' value='Create Account'>
    </p>
</form>

</body>

{% endblock %}

</html>use c9;

insert into events(ename,city,state,country,description,edate,approved,pid) values
    ("Lobster Pot","Wellesley","ME","US","tourney","2019-10-28",1,"tdeshong"),
    ("Reunion","San Francisco","CA","US","get-together","2019-01-03",1,"rtang"),
    ("Spikeball","Wellesley","MA","US","games","2018-12-04",1,"ltso"),
    ("Reunion","Chicago","IL","US","get-together","2019-09-18",0,"rtang"),
    ("High Tide","Raleigh","NC","US","tourney","2019-04-08",0,"ltso");
use c9;

insert into user(name,nickname,classyear,username,password,user_type,sprefs) values ("Riann","Nut",2019,"rtang","pass","admin","all"),
("Lauren","ebae",2020,"ltso","pass","admin","all"), ("Tam","Briese",2019,"tdeshong","pass","admin","all");
insert into industry(pid,iname) values ("ltso","Health Professions"), ("tdeshong","Technology and Engineering");
insert into events(ename,city,state,country,description,edate,approved,pid) values("Millyfest","Wellesley","MA","US","tourney","2018-11-12",1,"ltso");
insert into messages(sender,receiver,message) values ("ltso","tdeshong","hi"), ("ltso","tdeshong","bye"), ("tdeshong","rtang","cool");
insert into team(tname,`type`,nearestcity,state,country,pid) values ("Brute Squad","club","Boston","MA","US","tdeshong"), ("Nightlock","league","SF","CA","US","ltso");
insert into location(pid,city,nearestcity,state,country) values ("ltso","NYC","NYC","NY","US");
insert into feedback(subject,message,edate,pid) values ("practice","good","2018-11-09","rtang"), ("tourney","good","2018-11-09","ltso"), ("party","good","2018-11-09","tdeshong");
insert into donation(pid,item,description) values ("rtang","cleats","adidas size 7"), ("ltso","uniform","2014"), ("tdeshong","money","so much money");
insert into family(name,predecessor,member) values ("dynasty","rtang","ltso"), ("herd","ltso","tdeshong");
use c9;

insert into messages (sender, receiver, message) 
    values ("ltso", "tdeshong", "Hey Tam!"),
    ("tdeshong", "ltso", "Lauren, what's up?"),
    ("ltso", "tdeshong", "You going to the tournament this weekend?"),
    ("tdeshong", "ltso", "Not sure yet. I have a lot of work due Monday...Hbu?"),
    ("ltso", "tdeshong", "I think so! You should come!"),
    ("tdeshong", "ltso", "eh, we'll see"),
    ("rtang", "ltso", "Going to Target. Want anything?"),
    ("ltso", "rtang", "Goldfish please"),
    ("rtang", "ltso", "Ok, will do!"),
    ("rtang", "ltso", "Actually, have another space in the car. Wanna come?"),
    ("ltso", "rtang", "ok"),
    ("rtang", "ltso", "Meet you in gray lot at 6"),
    ("rtang", "tdeshong", "knock knock"),
    ("tdeshong", "rtang", "who's there?"),
    ("rtang", "tdeshong", "interupting cow"),
    ("tdeshong", "rtang", "interupting cow who?"),
    ("rtang", "tdeshong", "moooooo"),
    ("rtang", "tdeshong", "wait...realizing this joke doesn't work over text..."),
    ("tdeshong", "rtang", "...omg riann");use c9;

drop table if exists family;
drop table if exists donations;
drop table if exists feedback;
drop table if exists events;
drop table if exists messages;
drop table if exists team;
drop table if exists location;
drop table if exists industry;
drop table if exists user;
    
create table user(
    name varchar(50) not NULL,
    nickname varchar(30),
    email varchar(60) not NULL,
    phnum varchar(10),
    classyear varchar(4),
    username varchar(20) not NULL,
    password varchar(30) not NULL,
    user_type enum("regular","admin"),
    sprefs enum("all", "class", "overlap", "admin") not NULL,
    primary key(username)
    )
    ENGINE = InnoDB;
    
create table location(
    pid varchar(20) not NULL,
    city varchar(50),
    nearestcity varchar(50),
    state varchar(2),
    country varchar(60),
    primary key(pid),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;

create table team(
    tname varchar(50),
    `type` enum("club", "league", "college"),
    nearestcity varchar(50),
    state varchar(2),
    country varchar(60),
    pid varchar(20) not NULL,
    primary key(tname, pid),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table industry(
    pid varchar(20) not NULL,
    iname enum("Government and Law", "Technology and Engineering", "Consulting and Finance",
    "Physical and Life Sciences", "Education and Nonprofit", "Health Professions"),
    primary key(iname, pid),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table messages(
    mid int auto_increment,
    sender varchar(20) not NULL,
    receiver varchar(20) not NULL,
    message varchar(140),
    receipt bit not NULL default 0,
    primary key(mid, sender, receiver),
    foreign key (sender) references user(username)
    on delete restrict on update cascade,
    foreign key (receiver) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table events(
    ename varchar(50) not NULL,
    city varchar(50),
    state varchar(2),
    country varchar(60),
    description varchar(140),
    edate date not NULL,
    approved bit,
    pid varchar(20) not NULL,
    primary key(ename, edate),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table feedback(
    fid int auto_increment,
    subject varchar(50),
    message varchar(140),
    edate date,
    pid varchar(20) not NULL,
    primary key(fid),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table donation(
    did int auto_increment,
    pid varchar(20) not NULL, 
    item enum("cleats", "uniform", "money", "other"),
    description varchar(140),
    primary key(did),
    foreign key (pid) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;
    
create table family(
    name varchar(30),
    predecessor varchar(20), 
    member varchar(20),
    primary key(name, member),
    foreign key (predecessor) references user(username)
    on delete restrict on update cascade,
    foreign key (member) references user(username)
    on delete restrict on update cascade
    )
    ENGINE = InnoDB;